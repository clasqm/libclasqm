//This library dates back to the yabasic era.
//It is provided here as  a service, but is untested on yab

//Installation: create the directory /boot/home/config/settings/yab and copy or symlink
//the library there.

doc deck.yab Library for Drawing all 52 cards in a standard playing deck
doc Released by Hermang Hialino Mansilla Mattos, hh_mm@yahoo.com
doc After importing this Library, Display any card  calling this routine
doc deck.Card( pos_x, pos_y, cardnumber )
doc To see how to use this Library look at subroutine deck.Demo()
doc Last changes FrameCard now draws the card's border in black and reverts to the previous colour.
Release$ = "Nov 7th, 2005"

rem some Constants for indexing Suits
Clubs = 1
Spades = 2
Hearts = 4
Diamonds = 3

Red$ = "9f0000"
Black$ = "000000"
ink$ = Black$

sub RGB$(oldbm$, rgb$)
local i, lb, pos
local b$, h$, newbm$
newbm$ = "rgb "
pos = instr(oldbm$, ":")
newbm$ = newbm$ + mid$(oldbm$, 1, pos)
for i = pos + 1 to len(oldbm$)
   h$ = mid$(oldbm$, i, 1)
   b$ = bin$( dec( h$ ) )
   lb = len(b$)
   if lb = 3 b$ = "0" + b$
   if lb = 2 b$ = "00" + b$
   if lb = 1 b$ = "000" + b$
   rem print h$, " = ", b$
   for j = 1 to 4
      if mid$(b$, 5 - j, 1) = "1" then
         newbm$ = newbm$ + rgb$
      else
         newbm$ = newbm$ + "ffffff"
      end if
   next j
next i
return newbm$
end sub

if peek$("library") = "main" print "Wait, Loading Bitmaps . . . "


rem Numbers bitmaps
nx = 3
ny = 4
dim oldn$(13), bn$(13), rn$(13)
tmp = split("12,12:0400400e00e00b10b18138f3cf7c06e1fe1f
9,12:8f8f3360c0c1c1c1c1c9913f7ef
9,12:cf9f33303030f1e70c08913f7c7
10,12:0c0830f0e3cd833efbff0c0030e187
9,12:cf9f33060cf8f3060cc8913f7c7
9,12:0f0f17060cf8f3366cc8913f7c7
9,12:cf9f336060c0c0810303060c081
9,12:8f8f3366cc81f1f76cc8913f7c7
9,12:8f8f3366cc8913f7cf08183e3c3
10,12:6e9df63bdc63bdc63bdc63bdc6fb97
8,12:0f0f0606060606066666e7c3
8,14:c7ef6c6c6c6c6c6c6c6cefc70e0c
9,12:fefdb91b1e1c1870b166c8dbf7f", oldn$(), "\n")
for i = 1 to 13
   bn$(i) = RGB$(oldn$(i), Black$)
   rn$(i) = RGB$(oldn$(i), Red$)
next i

rem small Suit symbols bitmaps
dim ss$(4, 2)
ssx = 3
ssy = 18
rem Clubs
ss$(1, 1) = RGB$("12,11:0e00f10f10f1ce6effeffeffc570e00e0", Black$)
ss$(1, 2) = RGB$("9,10:838f0f1d5ffffff7b601070", Black$)
rem Spades
ss$(2, 1) = RGB$("10,11:00080070e3cf9ffefbffca1c1070", Black$)
ss$(2, 2) = RGB$("9,10:01070f1f7ffffff7b601070", Black$)
rem Diamonds
rem oem ss$(3, 1) = RGB$("8,9:0103c56fcb6dc70101", Red$)
rem oem ss$(3, 2) = RGB$("8,9:018283eeabc6878101", Red$)
rem small Suit symbols bitmaps
ss$(3, 1) = RGB$("8,9:0183c7efffefc78301", Red$)
ss$(3, 2) = RGB$("8,9:0183c7efffefc78301", Red$)
rem Hearts
ss$(4, 1) = RGB$("10,10:00036edbffefbffcf1e307080", Red$)
ss$(4, 2) = RGB$("9,9:6cedfffffefcf1f1c1010", Red$)

rem Suit Symbols bitmaps
sx = 29
sy = 41
dim s$(4), cs$(4)
rem  = "15,15:0c100f10cf10ef00f700f10777cff7fffffffffffd7d7c9c10e008f00"
s$(1) = RGB$("16,15:0c100e300f700f700f700e30cdd1eff3fff7fff7fff7ebe3c9c10c100e30", Black$)
s$(2) = RGB$("16,15:08000c100e300f708ff0cff1eff3eff3fff7fff7fff7fbe7e9c30c100e30", Black$)
rem Suit Symbols bitmaps
s$(3) = RGB$("16,15:08000c100e300f708ff0cff1eff3eff3eff3cff18ff00f700e300c100800", Red$)
s$(4) = RGB$("16,15:8383c7c7efefefefefffefffefffcff7cff78ff30ff10ef00c7008300010", Red$)

ClubsInv$ = RGB$("15,15:0e300e00727c7d7fffffffffffdff7cdd10f10cf10ef00f700f100700", Black$)
SpadesInv$ = RGB$("15,15:0e300e0872fe7dffffffffffffdff7eff3eff0ef30ef00e300e000200", Black$)
HeartsInv$ = RGB$("15,15:08000e008f00ef08ff0eff8fffefffffffffffffffffff7f7fbf1f870", Red$)


Rem Pictures of Jacks, Queens and Kings, splitted in top / bottom halfs
dim Jack$(4, 2), Queen$(4, 2), King$(4, 2)

half_top_x = 14
half_top_y = 12
half_bot_x = 14
half_bot_y = 20

rem Clubs
Jack$(1, 1) = RGB$("45,8:00fffff300020cdedb3070c08f7fe30f1838def770f70d0dfff70ef0e3c10aa0cf1026304510f184cdbba2cdd1", Black$)
Jack$(1, 2) = RGB$("45,64:80abb55cff721411aacfff12c22459fffb44548a2fff788ac15dc7d761710a62727029474760e085ac0c2f3e3084c3cdea00003fff7c670069f7fdfbc3021edcf95da12fdf6d95a8e389f339544c7c2dff85e2af0567cbd094f19cf7ddcbfe34df17d042d74effed5f2af0cf76f1011f18d5fd5fb8f3019111043f40a8ff9efebe0ca2600037e18aedde617f30bac83e16a50aae3ab06fa0ca3bbf2e8a18f3e4bdccf305b78d5ce550a7687c135d0cbd867b775187e800066530bdff79fe15027d20881980cf1dfabfbb18f8808f2ef30f54fabfff72e3920be8fb2c7fd3bbef398f4a0bd3b7a0f547a1fef43e322a9ccb91c715a9bdfbf485be9f3e7840c5dfbbfe9600e63afdfc000057b3c3210c7cf43035a10706e2e2940e4e46508e86ebe3ba83511efff4512a22dfff9a244348fff35588284eff3aadd5018bb345ddb3218f08a20c6408f3055083c70f70effff0f0ef0efff71418f0c7fed1030e0cdbfe304000cffbff00", Black$)
Queen$(1, 1) = RGB$("45,8:00cba5000002087be00070806e2b100f1024f59200f7040f91e00ef001a31810cf10ad7ee700f104dba9f0cdd1", Black$)
Queen$(1, 2) = RGB$("45,64:44f44c3cff788f5887cfff9ef801f9fffbce907e6fff7ef3104fd7d70f17cdf67270c3e19ff1e00c5678ef6e30c775f6cf100c59da66d7c0cff3e3effc783eb1065ddf1984ee76dd510aae6b7c1fddf87d65d505ca3dae6cbd56fd1ef7d77c74df2c1ec64155df00fdbfc3dffef73ffb4d087f6bf9ff4c7cfb6b6e15ea3bfeccff975dcfad52e1fe7adea9f978ff7ee7acfe5603dfc7f89fddebff92b6ef6d417fd7bbf89fe7eb417af63daf7ebd5ebf9cea5e7b866abbe3bae9fb37fedc57a8e6beaf3e32ff9dddce10b2dbfcdf7ffbc3fdbf00fbaa82677834fb2e3e63ef78df6abd36b5bc53a0aba6be1dbbf83ed675508dbb6ef72198fafae0cd7c1e3df7c5eff303ed645a9e3008f76faea30c7eb71e6e30078ef987c30e4eefb3e4f0ebeb6308cf7efffe7e0173dfff9f809f79fff3e112f11eff3c322f228bb30f95fb208f00e77cb508f30818c5800f70078df020ef00492f2408f008d476010e0007de10400000a5d300", Black$)
King$(1, 1) = RGB$("45,8:000011110200070477722000f10ffff2000f70cfff3040ef08fff70c1cf1810af0430f18204d186cdd1dbfa20d", Black$)
King$(1, 2) = RGB$("45,64:cff7ebb550adfff511aa049fffb2245186fff7548a20dc7d7ac1550a172727caa3430e0c37459860e3050825350008b2a57fb1008455da6730005aa617b600c3ae2f7ed00fffbfb73b1cfc6f5f7d51cb3fdfb3696e8acaeedb9deeb3fafd59bf54dc5e9db7f77bb7bd92fefaaee20b5f5ebefbbffdeb373cf614ac73433fdefcdfec7de7b87affffede6fb772ff99fb2ea68ff78fff78d6c4ef78fffa1ff85dfb1af7236b3ffff1eff16564df99ff4e6ff6fb7ffff5b1de7be37fb3f7bec43ce31386f3ce4d7fffddffbfbfaa047754f7f49bded5fefedb97a3b2a7d9abf5fcdb7b9dbf753547696cfebfc73cabe67f63d30dafffffff00b6ab455c3006be8655a000ce65baa21008dfea54d1000bca410a0c70419a2ec3070c2c553e4e4e850aa835ebe3b04512aefff618a244dfffd205588afff350aadd7eff3b045fdb8bb3618b20418f0c20f50818f3830efff10f7020cfff30ef0004ffff08f00044eee20e0004088880000", Black$)
rem Spades
Jack$(2, 1) = RGB$("45,8:81fffff1000844b77b1020861fdff10e00d2cf7730e30a58fff70ef084014550ef3060a9aa0eff0214daa2eff3", Black$)
Jack$(2, 2) = RGB$("45,64:a580455cff784808aacfff16800559fff3213baa2fff7a58c555e7df4b018a2b72f861e84580e0021409452e30e3c0ea250004ce3fda900003ff57a8100097ffffff000abeffff5700cdbaaaaab30c75ffff75f18fedffffeafcfba39495df7b5fa55dbbb3e55d51555f9f5bf6b4eee1c5d6fbbb5d9f4d7baaaaf185d73bbb7d9e5c6feffff10be73400002dbf4bbdfff306f738ffff7d7d6f67b8d604fc206b1de6f6bebeffff1ceb60cfaaddd6bdb400002c6bd08ffff7f6ba79bedddceba18f5555deb2f9badddf6ba3877f6d6fdaf9fa6a8abaa7cfddbaa7fafefba94ac5df3f57df77b7f18faeffffae30cd55555db300eaffff7d5000ffffffe9000815efffc000095b5c732000a45703c70c74a29028400701a217861f4ed45180d2fbe7aaa31a5efff455dc84cfff9aa00168fff35510121eff3aa201a5cff7455b2840ff705595060cf70aa280210f70efff1a50c70cfff34b00708edbf86104087feb3210008fffff81", Black$)
Queen$(2, 1) = RGB$("45,8:00c65b1200080c7d62202001853d040e002079cd40e30a0a1a390ef041618d02ef382cedfd4eff058ddd75eff3", Black$)
Queen$(2, 2) = RGB$("45,64:11b88c4cff7a2611ebcfff546224e9fff35c6e0f3fff7a8d00a6e7dfe3db3ee972f44b72e570e007671e6f1e3015adb2570002a76537810383f0f1ff78f177b047ee825ad6a23fb6e753f10bb9632fe6b2bf9e82d5df0b79e367b3b1bb9dfbf6deeafcbff0d697a7a7ff0a577bbefce04bdc6fe9bf467d39ac1eedff6d4ee99bfef5d3fec7ee47b5dfe008b8075dffffff38d6dbebbfbffc5dddddddd1e78bbbbbbbfb3f7fdedabb6b1cffffffbae01d100fbfade277e37f4baf7fd99752f6ffb77877b8be62fd93d43bd2073f7fdeca50ffe3b5e97b0ffd2d7f7a6fdfb3fd8fcde7c79bd0f3bb5179ed4d77fdc69fd08fcad76dfe45eb5f41f6f20dfe0f1eff8f0fc1408dfca6e54000ef4db5b80c78b678e6e0070eb74ed22f4e9d7cdbc7fbe7e500b15efffcd0763acfff9d24452afff3d688645eff33711d88cff7babbb1a0ff72beb7341cf740f186820f709c587050c702b39e040070209ca180040646be30100068da6300", Black$)
King$(2, 1) = RGB$("45,8:00080000010002020aaa1000e085dff1000e30ffdd1080ef0cbff3081ef38f30c082eff05508205eff3aafe50a", Black$)
King$(2, 2) = RGB$("45,64:cff745bb704dfff9a24418afff35588205fff7aa0150ae7df4517a04972f8aa151820e0c55d9d050e34aa0052a00045598a44100e6a6556b2007325a37b508deb5aa7bb0cbbdfb67b716d6fae77bf2ffddf7de6d53bbb68fe6fb9fd6becdda7375dd10bdedeebbbffbbdf7ea863267b3cc7dd2196bb32b2aba2d65ace57711ddff6ea0da8abeefd7dbdf7bff36b54b006ff8ffbe6ffd27b0ad2defbd97e7e9bdb7b4b50de4bff67dff1ff610c2ad6cfedefbdbebff7d515b0576ffbb88eea735e6b45d54d4cdd6984bbe33cde64c615befaddffddd77d7bd18bbaece7bb27e6bfadb67f1edddcaf67be7bbff4bdee75f6b68ede6ffbdd30dde55bd7b10adec5a4ce004d6aa656700822519aa200054a00552c70a0b9baa3070418a8551f4e9205e8a2fbe750a8055efffa0411aacfff51822459fffb20edda2eff350a7f55cff7a0412aa0ff741030cf1cf7810cfff30f70108ff6f0c70008bbba107000855504040008000001000", Black$)
rem Hearts
Jack$(4, 1) = RGB$("45,8:00eea57300027894923f07c41e0007b27994cef77a777398ffffe5bbe52aa28cedd92545569eee24c455b26773", Red$)
Jack$(4, 2) = RGB$("45,64:a49aa048bb3e5255109dddc42aa204677894455ce8bb0358aae40cf067c551808a0804ca2c10e8814aa50200c73825d3cf08e6099ea7220ec048eff958f918f375788832cd08f1990e6ef6000ce95d3f77007f7eb78fbffbdf94f2cf559f5cf0f0effff3cb0170e7c71a911958edf0fa679f2c778648193e1e3838a7c305c781016abff17cffae12105ec105875af63abfaaf0597bbd351eba23be66aae75566fdc45d78acbdde9acd55fd7c7f5e91a0817c08c975ff3e8ffd978083c3e0c9f51c1ee87c9f12e1ef1cf9365f0ebf0e938978f3ef0f90d34feff38f5f3cf3a8f1cf29ffcffcf0ed7ebe00ee7cba9730006f7670999f10b3cc111cffcf188f1a1fd7120350441679906f10730ba41ce3104045528116083053203071018aa3e20b7027551ac0d5173aa2291ee7204554236fa808aa4a767f32055925a7754daa23a85bf96aa2a48ffd214554a7ba67ffff19cafebefff3299b4de0016821c0ec498d1e40004ea55600", Red$)
Queen$(4, 1) = RGB$("45,8:0085970100000855f21f0700873e12b27100598b2b77700b16b4a5bb00a10f9cfdd106fdd7aaee204fdd75e773", Red$)
Queen$(4, 2) = RGB$("45,64:0ca80d78ab308611a70fdd009224e167700a5e0d78bb00a9002f1cf004ab3ac78a008e5221f3e000d6127cf1000acd371f3000c47875c3c60cacf7932421484e19f78e1cda249701a440886c6a6f4db3f0f61e173003fdd0b1957fae7daff19006fca9f8eb4ddd4b5bedd008a763d27b1b67d9aedfa4006367e9c694f6bcf4bfec10c6b3f79517dcd6e1bebbd1c7dee9ffefedba95ccaab7ce6157717b7efe8faa96f3eb5d33a95dafd77f977be38ddd7f876b3be8a3efcd630837b53f3d6f2967b7eac60025fa759be6d8de6bc6e5100bb5dad2bbb2d71f953f60098fd5be75fea98f0bbfc00ce8786f0fcdb2f6563611022580e9245b3871ef9872128424c9ef353063c3ae1e23000cf8ecb350009f3e486b0005cf844a7100e1e35cdd200758f4001500bf1eb07a500d5587244b00def0e588410cf63eb01730c577afbbf20cdbb5cbb7600ddd39f08500fde52f68d00ae6d4d39a008f8f487ce100a0584eaa10000080e9a100", Red$)
King$(4, 1) = RGB$("45,8:000822220100f07eeee6100b2790009910b777ef70940a5bbcfff393cfdd900ffbc8aee110aa492e775fd757e5", Red$)
King$(4, 2) = RGB$("45,64:8ab7dddaec40fd5a8055980cee411aacf1077822452f30ab82e055ff08d050025fe30e0ca38a677008f40aacb300cf41554eb10ff7aa361f28fc635a38f7cc1f3b529feeabced649573be2f5348df9fc1673819bfe379f301dfcffa5b309ef3b7b7c70bcdf8dfab707ce7b0fbdd06eff611fcfffff750fd70ffbff62682cfffef64c750073c76c81a0837d77c36effebdf5cf0ff1389f3cfbf0267920cbf3049e640fdf3cf91c8ff0b3efbf7ff76c3eefad1058136e7cd00ae326fffff341646fffff0ebf06dfdfff3fc86ff760bfdf8deb3a0e57fb1ff3d063adedcb790cfa7ff3f980cb9ac7fdb81ce783f9fb12cad475ceb926bf3d577d94adce823ef1c5ace3f1cf86c55eff08cf2aa82f3004d35502f110ef651c53060cdfa400a0710ffaa0741b70cd4a2441d518f355882ee3019aa01577d12375bbbabf1a7eaebfad5d49255088fef03dff0095753c9cfff3fbf70290ef7ad4508990009ecf00867777e0a008044441000", Red$)
rem Diamonds
Jack$(3, 1) = RGB$("45,8:0067bd67000008942170400006c0370818008ee670c50300ffff04f0a00eb003477410c51060778208aab79773", Red$)
Jack$(3, 2) = RGB$("45,64:5805deea57fa81aa015c774d24512a0578728a2441f7117055c92051a70aa00d1f1430351794418209a606a01050ad61a1100b044efff700718ffa7da30d2cfefbf7d1a5ee7fffdec4bfbfbffe59f6ffef55fb7ddefbffff7acb7ffeff77d369afb72aa2d9edefefffdce5eafbfbbb3eafbbfafd7b17d49fbfaa6d86fd9fafdd6fd2b6fbffbdbb55fadad5b45bcacfbfa77f6fdbddeff92d2bef7aebfebd6fdfdef7d4b6dff7abdbd6dee5edfb53da2daf7b1f6bddbddfdf6d4bf6bfb7fdbe61b655fd796be8dabb7fd5f57cdfffdf57a73bbbf7f7b79b4555edf596cbebbf7ffed356ffffdf7bfedfaaf7ff6f9a7ffdfdfd237bfffe77a58bef7f7f34b0c5fa7ff18e00e7f77220d0088586b50a0805606590410329e8ac0c28b8b00550e58e1493aa0e88ee8224514e1ee0548a24b2fe6a8055815bee577ba01a8fe8ed551041ae0608a3082cf2c00d70058a20ffff00c0e30efff100182064016000020e2569100000e6b5e600", Red$)
Queen$(3, 1) = RGB$("45,8:2087a610000806daa40040010e1bb0081048539e20c5080cb1eb04f001bf08714770287eef5077046babbb8773", Red$)
Queen$(3, 2) = RGB$("45,64:80f14cfa57f8ce588e5c77016511bb05709eb17e71f714e310cd50510f37c5fb0f10c2e19671410c32784f2010cfb8f9e5000c6fe1eeb0c1c7d3c3e61660bdf30773435bedef7d5409fafa7fd5179eae555f560bce27faf5e1c6ebdfbf4d6c7ebcdf76be5cdb7e1037d7eab73ef9fa796bfd30ced66aad7bf7c57e59b5de3bb4a61de457073ef1fd5bee6fea64575d1cf6ffdf6deffbdda65b45ff0d6ffff6b15dbada65bb5ff7b6fbff6f38b2ea2657d777dabf8f7ce0ea27b8652ddc7bed9a7ee3efdeb5566b730c3fd69e5d9f7ced57ebec087edb3a7d6efb3d7e36b2fdfbd76387af5fe473d06afaaa7579e8abfe5f5f902abef7b7dac2cee0cfbd166867c3cbe2830d7787fe3000a79f1d730804f21e4c30838e7987c308a0dda3ece00f1af308c720be8e6e8d690ef0de88a780fa6af11a731de75f228d0147b1dfd5f620bf0af77e140c538e10bd808e10d78d3010e20479cb1200300dd860800200255f6010000865e104", Red$)
King$(3, 1) = RGB$("45,8:000244000100018cd900172060efb31156071cff7739c0d30ffff3291dd120bf72d3cd143aef492edd8b455914", Red$)
King$(3, 2) = RGB$("45,64:aee218aa25a8773105552d38b110aaa846cd7e08aa29c0e20f2555491470274551710308105550604080c9aa0cc10034455185d1c286aa20b554303aa20e55900cfff3451c28f7229f51ebffb9e4219ffefb5e2d4c7dbbfffff2edd6f7000effe5f77555af7f05b3000afc78771ff7aab3cfaa108abf3ebddcfbaca3e17fefb43b7e7cee775fefee9ddf79e7b3f77bdeaed6fced6ff2dbe77eff50dff3bbfe5a0abffcff9b4f77b73f6b7dffdeefc9e79ffbb977f7faaa773e7edc2df7fe87c635df3bbd7cfd510877f3cd65eff8ee1e3f5000cdb0fef5aaaefea7ff7000ef6bb74fffffddfe32b47adf7bfd84279dffd78bf944ef1438a3cfff3009aa70455c0c2aad045561438ba18aa22c00832055930102060aaa0810a0ce8aa2e40e3892aaa4f045039455107cf362155508ca2cb4aaa084ff15a45518cba6a89aa2d1df7092f75c2ca2cb4efd040f7894cffff0aa039ceeff38f06a88cdf70a04e8009b3180008000224000", Red$)

Back$ = RGB$("72,96:efffffffffffffffffedbbbdaaaaaaaadeeea7ffeffffffff7fbfbefbd75daaaaaae5fbf6bffdfbffddffbfdebefd67de557baae6ffeabfbfbbefaddf7f5bbef6f5fe55f6baa5fffedfde57fd5bddff75b6f6f7fa5ba5b655dffedfbabfadde67bff6bc7bef65faaaad655ff6ffbabb5bda65bbf55e5de7dda5555bd65ffefb7dba6da65d6bfbd67fdb67baaaaaada67edbeedadaa455b67feafdb5b5559aa55babbeae6bd65552aaad7ddefbddaaaa8415baa77adee6755252a45d6dde777baaaa259255b776dbb6b5da884aa6dadcf6dbda555229aa6db6bd7557502194aaabeed7d6b509148255be5a7d6bd018412a8ad5fedbba60090088aaae5aeee655440004aaaaee7b5bd01800829a6776ddea62840008455dac77b5580200052ad6feddda51240000955b5677bd640200055a6decdbd650980004aaab567d6b6206004945b6feffb5b848a49255dd5e6bef6506aa6dad77fefffe7aded6d6f7dffefffbf256b88bbe7ffaffff6a4b30ceebffeebd6ffaae25dbbfeffefffffaaeba6ffffdfefffd7557b4e7fefffefff7faae9aeedbbfdef7ff755730bbfffffeefff755f5bfffffdfeffff7b5fbcff77fffeffbff5deaee7fffffe7ffffa5fae7ffffffefffd7b6f5fffffbffeffff755f41ffeefeeefbfffa5b259ffbfff6ffff7b6f65defffffeffdbf557555bfffffeffff7ddaa6bfeffffefffffa65b5defffffebfff7dabda5dfebbfefffff65d5baefbfffeffff7bee7dddfffffef7fefa5ffaaefffffeffff7daefd6ffffff6fffff5bff7bffffbfebffff65f9faffffffefefffae7c7dfeddffef7777fffafffffffeefffffff7cffffffffefffffff7dffffffffefffbf7ffc6f8eb3ffef7c0f987d872911ffed71bec27c8aac5bfeeffc56d1fcd36d5affef7d96db6de7fc2fffef7c3fc374a36f9fffaffa57e57d4bcf5fffed7817937927df3cffef75af4afc130e9ebfef79df3d7db75f7efeef7affffffffffffffeffcffffffffffffffed7dfdffffffffffffef7cf7f7394bfbf7ffef7dffdff61d6f7ffeef7dffffffffffffffeffffffffffff7ffffafffff7fbffffffddfeeffdffdfdfeffffffebff7ffff7fbbffffeeffffdffeffffbbfffefddffefba5bfffdffefffffbfffefeff7ffeffffffef6ff7fffffeff7fffbff5dfbfffeeb7fdfff7dffffefffefffffffa005ffffffeffffeff7bdedffddf", Black$)


if peek$("library") = "main" Demo()


sub DrawSuit(suit, px, py)
if py - DY < 48 or suit = Diamonds then
   putbit s$(suit) to px , py , "t"
elsif suit = Clubs then
   putbit ClubsInv$ to px , py , "t"
elsif suit = Spades then
   putbit SpadesInv$ to px , py , "t"
elsif suit = Hearts then
   putbit HeartsInv$ to px , py , "t"
end if
end sub

export sub ClearCard(dx, dy)
clear fill rect dx, dy to dx + 72, dy + 96
end sub

export sub FrameCard(dx, dy)
local b, g, r
local new_pixel$, original_pixel$
original_pixel$ = getbit$(1, 1, 1, 1) // Get the original colour of the pixel
dot 1, 1                          // change the pixel to the new colour
new_pixel$ = getbit$(1, 1, 1, 1)      // get the new colour of the pixel
r = red(original_pixel$)           // find the red value of the original colour
g = green(original_pixel$)         // same for green...
b = blue(original_pixel$)          // and blue.
colour r, g, b
dot 1, 1                          // reset the pixel to its original state
r = red(new_pixel$)                // find the current colour
g = green(new_pixel$)
b = blue(new_pixel$)
colour 0, 0, 0
clear fill rect dx, dy to dx + 72, dy + 96
rect dx, dy to dx + 72, dy + 96
colour r, g, b
end sub

sub red(a$)                      // Find value of the red element
local r
r = dec(mid$(a$, 9, 2))
return r
end sub

sub green(a$)                    // Find value of the green element
local g
g = dec(mid$(a$, 11, 2))
return g
end sub

sub blue(a$)                    // Find the value of the blue element
local b
b = dec(right$(a$, 2))
return b
end sub

export sub Card(dx, dy, cardnumber)
local cn, suit
if cardnumber < 1 or cardnumber > 52 then
   putbit Back$ to dx, dy
   return
end if
rem for DrawSuit
DX = dx
DY = dy
cn = 1 + int( (cardnumber - 1) / 4 )
suit = 1 + mod(cardnumber - 1, 4)
FrameCard(dx, dy)
dot dx + 1, dy + 95
if suit = Clubs or suit = Spades then
   putbit bn$(cn) to dx + nx , dy + ny
else
   putbit rn$(cn) to dx + nx , dy + ny
end if

if cn < 11 then
   putbit ss$(suit, 1) to dx + ssx , dy + ssy
   if cn = 1 or cn = 3 DrawSuit( suit, dx + 29 , dy + 41)
   if cn = 2 or cn = 3 then
      DrawSuit(suit, dx + 29 , dy + 10)
      DrawSuit(suit, dx + 29 , dy + 71)
   end if
   if cn = 4 or cn = 5 or cn = 6 or cn = 7 or cn = 8 or cn = 9 or cn = 10 then
      DrawSuit(suit, dx + 16 , dy + 10)
      DrawSuit(suit, dx + 42 , dy + 10)
      DrawSuit(suit, dx + 42 , dy + 71)
      DrawSuit(suit, dx + 16 , dy + 71)
   end if
   if cn = 5 DrawSuit(suit, dx + 29 , dy + 39)
   if cn = 6 then
      DrawSuit(suit, dx + 16 , dy + 39)
      DrawSuit(suit, dx + 42 , dy + 39)
   end if
   if cn = 7 then
      DrawSuit(suit, dx + 16 , dy + 41)
      DrawSuit(suit, dx + 42 , dy + 41)
      DrawSuit(suit, dx + 29 , dy + 27)
   end if
   if cn = 8 or cn = 10 then
      DrawSuit(suit, dx + 16 , dy + 31)
      DrawSuit(suit, dx + 42 , dy + 31)
      DrawSuit(suit, dx + 42 , dy + 50)
      DrawSuit(suit, dx + 16 , dy + 50)
   end if
   if cn = 10 then
      DrawSuit(suit, dx + 29 , dy + 20)
      DrawSuit(suit, dx + 29 , dy + 61)
   end if
   if cn = 9 then
      DrawSuit(suit, dx + 16 , dy + 52)
      DrawSuit(suit, dx + 16 , dy + 30)
      DrawSuit(suit, dx + 42 , dy + 30)
      DrawSuit(suit, dx + 42 , dy + 52)
      DrawSuit(suit, dx + 29 , dy + 39)
   end if

else
   putbit ss$(suit, 2) to dx + ssx , dy + ssy
   rect dx + half_top_x - 1 , dy + half_top_y - 1 to  dx + half_top_x + 45, dy + half_top_y + 72

   if cn = 11 then
      putbit Jack$(suit, 1) to dx + half_top_x , dy + half_top_y
      putbit Jack$(suit, 2) to dx + half_bot_x , dy + half_bot_y
   end if
   if cn = 12 then
      putbit Queen$(suit, 1) to dx + half_top_x , dy + half_top_y
      putbit Queen$(suit, 2) to dx + half_bot_x , dy + half_bot_y
   end if
   if cn = 13 then
      putbit King$(suit, 1) to dx + half_top_x , dy + half_top_y
      putbit King$(suit, 2) to dx + half_bot_x , dy + half_bot_y
   end if
end if
end sub

sub Demo()
local i, px, py
local k$
px = 50
py = 30
i = 44
clear screen
open window 200, 170

print  "Browse with + - "
print  "Press esc to end"
repeat
   Card( px, py, i)
   k$ = inkey$
   if k$ = "+" and i < 53 i = i + 1
   if k$ = "-" and i > 1 i = i - 1
until(k$ = "esc")
end sub
