//This library dates back to the yabasic era.
//It is provided here as  a service, but is untested on yab

//Installation: create the directory /boot/home/config/settings/yab and copy or symlink
//the library there.

// Save as libdeck2.yab within the yabasic library.
docu Library libdeck.yab, coded by Hermang H. M. M. with some
docu minor additions by Derek. (Sorry, couldn't resist :-)
docu Routines for playing cards, released under GPL
docu Last changes on May 22, 2005
docu please send comments or bug reports to hh_mm@yahoo.com
docu this Library uses the Library libdeck.yab for displaying graphics
doc
doc InitDeck(deck())
doc Rank$(card)
doc Suit$(card)
doc Shuffle(deck52() , ntimes )
doc Card_Value(rank$, suit$)
doc Short_Name$(card)
doc Long_Name$(card)
doc Expand_name$(rank$, suit$
doc Contract_Name$(card$)
doc

dim okdeck(53)
rem this array is a sample deck
dim faceup(53)
rem this keeps tracks weather a card is face up or down

Cards$ = "A23456789DJQK"

Suits$ = "CSDH"
rem Clubs Spades Diamonds Hearts

InitDeck(okdeck())

export sub InitDeck(deck())
local n
for n = 1 to 52
   deck(n) = n
next n
deck(0) = 52
end sub

export sub InitDecks(deck())
local n, num
for n = 1 to 104
   if n > 52 then
      num = n - 52
   else
      num = n
   end if
   deck(n) = num
next n
deck(0) = 52
end sub

export sub Suit_Colour$(r$, s$)
local card
local suit$
card = Card_Value(r$, s$)
suit$ = Suit$(card)
if suit$ = "D" or suit$ = "H" then
   return "Red"
else
   return "Black"
end if
end sub

export sub Rank$(n)
local r$
r$ = mid$(Cards$, 1 + int((n - 1) / 4), 1)
if r$ = "D" r$ = "10"
return r$
end sub

export sub Suit$(n)
return mid$(Suits$, mod(n - 1, 4) + 1, 1)
end sub

rem Oakford method
export sub Shuffle(deck52() , ntimes )
local h, j, n, z
for n = 1 to ntimes
   for j = 52 to 2 step - 1
      z = int(ran(j)) + 1
      h = deck52(z)
      deck52(z) = deck52(j)
      deck52(j) = h
      faceup(j) = 0
   next j
next n
end sub

export sub Double_Shuffle(deck104() , ntimes )
local h, j, n, z
dim faceup(105)
for n = 1 to ntimes
   for j = 104 to 2 step - 1
      z = int(ran(j)) + 1
      h = deck104(z)
      deck104(z) = deck104(j)
      deck104(j) = h
      faceup(j) = 0
   next j
next n
end sub

export sub Card_Value(r$, s$)
local final_pos, rank_pos, suit_pos
local c$, rank$, suit$
c$ = r$ + s$
if instr(c$, " of ") > 0 c$ = Contract_Name$(c$)
if left$(c$, 2) = "10" c$ = "D" + right$(c$, 1)
rank$ = upper$(left$(c$, 1))
suit$ = upper$(right$(c$, 1))
rank_pos = instr(Cards$, rank$) - 1
if rank_pos = - 1 error "Unknown rank '" + rank$ + "'."
suit_pos = instr(Suits$, suit$)
if suit_pos = 0 error "Unknown suit '" + suit$ + "'."
final_pos = (rank_pos * 4) + suit_pos
return final_pos
end sub

export sub Short_Name$(card) // takes eg 22 and converts it to '6S'
return Rank$(card) + Suit$(card)
end sub

export sub Long_Name$(card) // takes 22 and returns 'Six of Spades'
// Decided to build names on the fly
local num, rank, suit
local card$, rank$, suit$, tmp$
local v$(1)
if card < 1 or card > 53 error "Card value " + str$(card) + " out of range (1 to 52 inclusive)."
rank$ = Rank$(card)
if rank$ = "10" rank$ = "D"
rank = instr(Cards$, rank$)
suit$ = Suit$(card)
suit = instr(Suits$, suit$)
// Found the position of rank and suit in data list
restore full_names
read rank$
num = token(rank$, v$())
card$ = v$(rank) + " of "
read suit$
num = token(suit$, v$())
card$ = card$ + v$(suit)
return card$
end sub

export sub Expand_Name$(r$, s$) // '6S' '6','s' etc to 'Six of Spades'
local card
local card$
card$ = r$ + s$
card = Card_Value(card$)
if card < 0 error "Unknown card '" + card$ + "'."
return Long_Name$(card)
end sub

export sub Contract_Name$(card$)// opposite to 'Expand_Name$()'
local found, n, num, rank
local rank$, suit$, tmp$
local rank$(1), v$(1)
num = token(card$, v$())
if num <> 3 or v$(2) <> "of" error "Card format '" + card$ + "' incorrect."
restore full_names
read tmp$
num = token(tmp$, rank$())
for n = 1 to 13
   if v$(1) = rank$(n) then
      rank = n
      found = true
      break
   end if
next n
if not found error "Unknown rank '" + v$(1) + "'."
rank$ = mid$(Cards$, rank, 1)
if rank$ = "D" rank$ = "10"
suit$ = left$(v$(3), 1)
if not instr(Suits$, suit$) error "Unknown suit '" + suit$ + "'."
return rank$ + suit$
end sub

label full_names
data "Ace Two Three Four Five Six Seven Eight Nine Ten Jack Queen King"
data "Clubs Spades Diamonds Hearts"
